local api = require("love_api")

local GITHUB_LINK = "https://github.com/jacob-herrera/love.yml"

local enum_cache = {}
local types_cache = {}
local types_alphabetical = {}

local header_output = ""
local globals_output = ""
local _structs_output = "" -- unused

local depth = 0 -- amount of indents
local o = "" -- working output, will be overwritten throughout the program

local function a(str)
	for _ = 1, depth do
		o = o .. "  "
	end
	o = o .. str.. "\n"
end

local function writeType(str)
	local d = depth
	-- ENUMS
	if enum_cache[str] ~= nil then
		a("- type:")
		depth = d + 1
		for _, const in ipairs(enum_cache[str]) do
			if const == "'" then -- single quote exception: use double quotes
				a('- "'.."'"..'"')
			elseif const == "on" or const == "off" -- weird YAML reserve words
			or const == "true" or const == "false"
			or const == "yes" or const == "no"
			or const == "y" or const == "n"
			-- special special characters & enums that start with numbers
			or const:match("^[^%W%d][%w]*$") == nil then
				a("- '" .. const .."'")
			else
				a("- "..const)
			end
		end
	-- LÖVE TYPE
	elseif types_cache[str] ~= nil then
		a("- type:")
		depth = d + 2
		a("display: " .. str)
	-- LUA TYPE
	else
		if str == "table" or str == "string" or str == "number" 
		or str == "function" or str == "nil" then
			a("- type: " .. str)
		elseif str == "boolean" then
			a("- type: bool")
		elseif str == "..." then
			a("- type: '...'")
		else
			-- MIX TYPE / OTHER
			a("- type: any")
		end
	end
	depth = d
end

local function writeHeader()
	header_output = ""
	local current_time = os.time()
	local formatted_time = os.date("%Y-%m-%d", current_time)
	a("# This file was generated by "..GITHUB_LINK)
	a("# @ "..formatted_time)
	a("# LÖVE-API version "..api.version)
	a("---")
	a("base: lua51")
	a("name: love")
	header_output = o
	o = ""
end

local function isTableAllDefault(arg)
	if arg.type ~= "table" then
		return false
	end

	if arg.table == nil then
		return false
	end

	for _, v in ipairs(arg.table) do
		if v.default == nil then
			return false
		end
	end

	return true
end

local function writeFuncFields(func)
	local d = depth
	local args = {}
	local all_variants_return = true

	for _, variant in ipairs(func.variants) do
		if variant.arguments ~= nil then
			for i, argument in ipairs(variant.arguments) do
				if args[i] == nil then
					args[i] = {
						type = argument.type,
						appearances = 1,
						is_additional = argument.name == "...",
						has_default = argument.default ~= nil,
						is_table_all_default = isTableAllDefault(argument),
					}
				else
					if args[i].type ~= argument.type then
						args[i].type = "any"
					end
					if argument.name == "..." then
						args[i].is_additional = true
					end 
					if argument.default ~= nil then
						args[i].has_default = true
					end
					if isTableAllDefault(argument) == false then
						args[i].is_table_all_default = false
					end
					args[i].appearances = args[i].appearances + 1
				end
			end
		end
		if variant.returns == nil then
			all_variants_return = false
		end
	end
	
	if next(args) == nil then -- no args
		a("args: []")
	else -- args
		a("args:")

		for _, arg in ipairs(args) do
			depth = d + 1
			if not arg.is_additional then
				writeType(arg.type)
			else
				writeType("...")
			end

			if (arg.appearances ~= #func.variants)
			or arg.is_additional
			or arg.has_default
			or arg.is_table_all_default then
				depth = d + 2
				a("required: false")
			end
		end
	end

	if all_variants_return then
		depth = d
		a("must_use: true")
	end

	depth = d
end

local function cacheTypes()
	for _, love_type in ipairs(api.types) do
		types_cache[love_type.name] = love_type
		table.insert(types_alphabetical, love_type.name)
	end
	
	for _, mod in ipairs(api.modules) do
		if mod.types ~= nil then
			for _, love_type in ipairs(mod.types) do
				if type(love_type) == "table" then
					types_cache[love_type.name] = love_type
					table.insert(types_alphabetical, love_type.name)
				end
			end
		end
	end
	
	table.sort(types_alphabetical) -- sorts the names alphabetically
end

local function cacheEnums()
	for _, mod in ipairs(api.modules) do
		if mod.enums ~= nil then
			for _, enum in ipairs(mod.enums) do
				if type(enum) == "table" then
					enum_cache[enum.name] = {}
					for _, const in ipairs(enum.constants) do
						local token = const.name 
						table.insert(enum_cache[enum.name], token)
					end
				end
			end
		end
	end
end

local function writeStructs()
	_structs_output = ""
	depth = 0
	a("structs:")
	for _, typeName in ipairs(types_alphabetical) do
		depth = 1
		a(typeName..":")
		if types_cache[typeName].functions ~= nil then
			depth = 2
			for _, func in ipairs(types_cache[typeName].functions) do
				depth = 2
				a(func.name..":")
				depth = 3
				writeFuncFields(func)
				a("method: true")
			end
			-- also a supertype funcs
			if types_cache[typeName].supertypes ~= nil then
				for _, supertypeName in ipairs(types_cache[typeName].supertypes) do
					if types_cache[supertypeName].functions ~= nil then
						for _, superfunc in ipairs(types_cache[supertypeName].functions) do
							depth = 2
							a(superfunc.name..":")
							depth = 3
							writeFuncFields(superfunc)
							a("method: true")
						end
					end
				end
			end
		else
			error("no function data ??!?")
		end
	end
	_structs_output = o
	o = ""
end

local function writeGlobals()
	local pre = "love."
	globals_output = ""
	depth = 0
	a("globals:")
	-- love root
	for _, func in ipairs(api.functions) do
		depth = 1
		a(pre..func.name..":")
		depth = 2
		writeFuncFields(func)
	end
	-- love module functions
	for _, mod in ipairs(api.modules) do
		if type(mod.functions) == "table" then
			for _, func in ipairs(mod.functions) do
				depth = 1
				a(pre..mod.name.."."..func.name..":")
				depth = 2
				writeFuncFields(func)
			end
		end
	end
	-- love root callbacks
	for _, callback in ipairs(api.callbacks) do
		depth = 1
		a(pre..callback.name..":")
		depth = 2
		a("property: full-write")
	end

	globals_output = o
	o = ""
end

cacheEnums()
cacheTypes()

writeHeader()
writeStructs()
writeGlobals()

local file = io.open("love.yml", "w")
if file == nil then return end
file:write(header_output..globals_output)
file:close()